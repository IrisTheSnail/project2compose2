package com.example.project2compose.core.generators.dockerfile.templates;

import com.example.project2compose.core.generators.dockerfile.exceptions.InvalidBuildSystemTypeException
import com.example.project2compose.core.models.BuildSystemType
import com.example.project2compose.core.models.Image;

const val NODE_DOCKERFILE_TEMPLATE_ID = "node_dockerfile_template";
class NodeDockerfileTemplate: IDockerfileTemplate {

    private fun assertCorrectBuildSystem(image: Image) {
        if(image.buildSystemType != BuildSystemType.NODE_NPM && image.buildSystemType != BuildSystemType.NODE_YARN)
            throw InvalidBuildSystemTypeException(NODE_DOCKERFILE_TEMPLATE_ID, image.buildSystemType);
    }

    override fun generateTopComment(image: Image?): String {
        assertCorrectBuildSystem(image!!);
        return """# THIS IS AN AUTOGENERATED DOCKERFILE
            # Template: npm
            
        """.trimIndent();
    }

    override fun generateInstallStage(image: Image?): String {
        assertCorrectBuildSystem(image!!);
        return """# Stage 1: install
            FROM ${image.installStageImage} AS install
            WORKDIR ${image.workdir}
            COPY package.json .
            COPY ${
                when(image.buildSystemType){
                    BuildSystemType.NODE_YARN -> "yarn.lock"
                    BuildSystemType.NODE_NPM -> "package-lock.json"
                    else -> { "" /* Unreachable because we asserted correct build system */ }
                }
            } .
            RUN ${
                when(image.buildSystemType){
                    BuildSystemType.NODE_YARN -> "yarn"
                    BuildSystemType.NODE_NPM -> "npm install"
                    else -> { "" /* Unreachable because we asserted correct build system */ }
                }
            }
            
        """.trimIndent();
    }

    override fun generateBuildStage(image: Image?): String {
        assertCorrectBuildSystem(image!!);
        return """# Stage 2: build
            FROM ${image.buildStageImage ?: "install"} AS build
            
        """.trimIndent();
    }

    override fun generateRunStage(image: Image?): String {
        assertCorrectBuildSystem(image!!);
        return """# Stage 3: run
            FROM ${image.runStageImage ?: "build"} AS run
            RUN ${
                when(image.buildSystemType){
                    BuildSystemType.NODE_YARN -> "yarn dev"
                    BuildSystemType.NODE_NPM -> "npm start"
                    else -> { "" /* Unreachable because we asserted correct build system */ }
                }
            }
            
        """.trimIndent();
    }

    override fun generate(image: Image?): String {
        assertCorrectBuildSystem(image!!);
        return """
            ${generateTopComment(image)}
            ${generateInstallStage(image)}
            ${generateBuildStage(image)}
            ${generateRunStage(image)}
        """.trimIndent()
    }
}
